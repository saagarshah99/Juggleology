//performing ajax call for get request
function fetchTricks()
{ 
	$showTricksForm = $(".frmViewTricks") //might be required when we implement update and delete
	
	//attributes required for request
	$.ajax(
		{
			url: '/Juggleology/fetch_tricks/',
			type: 'GET',
			dataType: 'json',
			success: outputTricksResponse,
			error: logError,
		})
}

var myResponse = ""

//output the content if the get request is successful
function outputTricksResponse(response)
{  
	//building the table that outputs for the contents from the database (trick directory)
	// --> for the view tricks table
	var outputText = "<table class='table table-responsive' id='tlbGetResponse' width='100%' cellpadding='5'>"
	outputText += "<tr class=''>" +
	//"<th><center>ID</center></th>" +
	"<th><center>Trick Name</center></th>" +
	"<th><center>Trick Description</center></th>" +
	"<th><center>Difficulty Level</center></th>" +
	"<th><center>Actions</center></th>" +
	"</tr>"
	
	//loop through trick records to fetch information
	loopThroughRecords(response, outputText)
	myResponse = response
	$("#tlbGetResponse th").css("font-size", "110%");
}

//loop through Trick table and output each record
function loopThroughRecords(response, outputText)
{	
	for(var i=0; i<response.tricks.length; i++)
	{		
		//only showing tricks for current user
		if(response.tricks[i].backupUserID == response.currentuser)
		{			
			outputText += "<tr>" + 
			"<td style='text-align: center;'>" + response.tricks[i].trickName + 
			"<br />(<b style='color: #19b6ff'>" + response.tricks[i].numberOfObjects + " "+ 
			response.tricks[i].propCategory +"</b>)<br /><div id='progressBar"+response.tricks[i].id+"'></div><br /></td>" +
			"<td width='40%'><span style='font-size: 90%'><i>" + 
			response.tricks[i].trickDescription + "</i></span><p /></td>"
			
			//output additional trick information -  difficulty level colour coded
			outputText += "<td><div id='trickButtonPress" + response.tricks[i].id  + "'><center>" + 
			"<span style='font-weight: bold; color:"+howDifficult(response.tricks[i].difficultyLevel)+"'> " + 
			response.tricks[i].difficultyLevel + "</span></center></div> <br /> </div></td>"
			
			/*
				- edit and delete buttons have been defined for each trick
				- passing id of trick to edit/delete
			*/		
			outputText += "<td width='%'><center><input type='button' id='buttonForEdit' class='btn btn-warning form-group' " +
			"onclick='toggleTrickEdit("+response.tricks[i].id+")' value='Edit' />" +
			"&nbsp;&nbsp;<input type='button' name='item_ID' class='btn btn-danger form-group' " +
			"onclick='deleteTricks("+response.tricks[i].id+")' value='Delete' />" +
			
			"&nbsp;&nbsp;<input type='button' class='btn btn-success form-group' " +
			"onclick='setGoal("+i+")' value='Set Goal' /></center>" +
			
			"</td>"
			
			//building forms for editing each trick - hidden by default
			outputText += "<tr><td colspan='5' id='editTricksFormDivision"+response.tricks[i].id+
			"' style='display: none'><div class='editFields'>" + 
			buildFormsToEdit(response.tricks[i].id) + "</div></td></tr>";		
		}
		
	}
	outputText += "</tr></table>"
	
	$('.outputTricks').html(outputText) //load generated output into html	
}

//return appropriate colour depending on the difficulty level that is passed into this function
function howDifficult(difficultyLevel)
{
	var levels = ["Beginner", "Intermediate", "Advanced"];
	var correspondingColours = ["#0b0", "#ff9933", "#f00"]
	
	for(var i=0; i<levels.length; i++)
	{
		if(difficultyLevel == levels[i])
		{
			return correspondingColours[i]
		}
	}
}

//triggered when user clicks on set goal button for particular record in directory
function setGoal(trickID)
{
	//producing query string w/ relevant info
	var name = myResponse.tricks[trickID].trickName
	var howMany = myResponse.tricks[trickID].numberOfObjects
	var prop = myResponse.tricks[trickID].propCategory	
	var goalQueryString = name + " (" + howMany + " " +	prop + ")"
	
	//redirecting to goal page, passing the relevant information to add to the form
	window.location.href = "/Juggleology/juggling-goals?" + goalQueryString	+ "#addGoalForm"
}

//show or hide the edit form when triggered by edit button for a particular trick
function toggleTrickEdit(trickID) {$('#editTricksFormDivision'+trickID).toggle(250)}

//building forms for updating attributes in a particular trick record w/ unique id (auto-generated by DB)
function buildFormsToEdit(trickID)
{
	var buildEditForm = "<table class='table-borderless table'>" 
	
	//update trick name field
	buildEditForm += "<tr><form id='editTrickName"+trickID+"'>" +	
	
	"<td><input type='text' id='editTrickNameID"+trickID+"' name='nameOfTrick"+trickID +
	"' class='form-control' onchange='removeForbidden(this)' maxlength='200' placeholder='Trick Name' /></td>" +	
	"<td><input type='button' id='submitTrickChange'"+trickID+
	"' class='btn btn-primary form-control' onclick='editTricks("+trickID+
	", \"trickname\")' value='Update Name' /></td></form></tr>";
	
	//trick description field - make this a text area
	buildEditForm += "<tr><form id='editTrickDescription"+trickID+"'>" +
	"<td><input type='text' id='editTrickDescriptionID"+trickID+"' name='descriptionOfTrick"+trickID
	+"' class='form-control' onchange='removeForbidden(this)' maxlength='200' placeholder='Trick Description' /></td>"
	buildEditForm += "<td><input type='button' id='submitTrickChange'"+trickID+
	"' class='btn btn-primary form-control' onclick='editTricks("+trickID+
	", \"trickdescription\")' value='Update Description' /></td></form></tr>";
	
	//number of objects field
	buildEditForm += "<tr><form id='editObjectCount"+trickID+"'>" +
	"<td><input type='text' id='editNumberObjectsID"+trickID+"' name='objectCount"+trickID+"'"+
	'maxlength="3" onkeypress="numbersOnly(event)" onchange="if(isNaN(this.value)){this.value=\'\'}"' +
	"class='form-control' placeholder='Number of objects' /></td>" +
	"<td><input type='button' id='submitTrickChange'"+trickID+
	"' class='btn btn-primary form-control' onclick='editTricks("+trickID+
	", \"objectcount\")' value='Update Number of Objects' /></td></form></tr>";
	
	//prop category field - character limit in models set to 100 currently
	buildEditForm += "<tr><form id='editPropCategory'"+trickID+"'>" +
	"<td><select id='editPropCategoryID"+trickID+"' class='form-control' name='propType"+trickID+"'>" +
	"<option value='Balls'>Balls</options>" +
	"<option value='Clubs'>Clubs</options>" +
	"<option value='Rings'>Rings</options>" +
	"<option value='Poi'>Poi</options>" +
	"<option value='Diablo'>Diablo</options>" +
	"<option value='Kendama'>Kendama</options>" +		
	"<option value='Hula Hoops'>Hula Hoops</options>" +
	"<option value='Devil Sticks'>Devil Sticks</options>" +
	"<option value='Contact Juggling'>Contact Juggling</options>" +
	"<option value='Other'>Other</options>" +
	"</select></td>" +
	"<td><input type='button' id='submitTrickChange'"+trickID+
	"' class='btn btn-primary form-control' onclick='editTricks("+trickID+
	", \"propcategory\")' value='Update Prop Category' /></td></form></tr>";
	
	//difficulty level field - character limit in models set to 100 currently
	buildEditForm += "<tr><form id='editDifficultyLevel"+trickID+"'>" +
	"<td><select id='editDifficultyLevelID"+trickID+"' class='form-control' name='levelOfDifficulty"+trickID+"'>" +
	"<option value='Beginner'>Beginner</options>" +
	"<option value='Intermediate'>Intermediate</options>" +
	"<option value='Advanced'>Advanced</options>" +
	"</select></td>" +
	"<td><input type='button' id='submitTrickChange'"+trickID+
	"' class='btn btn-primary form-control' onclick='editTricks("+trickID+
	", \"difficultylevel\")' value='Update Difficulty Level' /></td></form></tr>";
	
	return buildEditForm + "</table>"
}

fetchTricks();
